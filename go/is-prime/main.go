package main

import (
	"fmt"
	"math"
)

// O(√n)
func run(n int) bool {
	if n < 2 {
		return false
	}
	// 平方根より小さい約数が存在すれば合成数、存在しなければ素数
	// 平方根より大きい値同士の積は必ずnより大きくなるためあり得ない
	//
	// nの平方根までで割り切れるかを調べる
	// NOTE: nの平方根(math.Pow(n, 0.5))より大きい値(x...x+y)に着目する
	// n < math.Pow(x, 2) なので、xはありえない
	// n < x * (x+y) なので、xもx+yもありえない
	// nの平方根より大きい2つの整数の席では表せない
	// よってnの平方根より大きい値は調べる必要はない
	//
	// nが合成数(=素数ではない)の場合は、n = a * b と表せる
	// もしa、bの両方がnの平方根より大きい場合、a*bはnより大きくなってしまう(nの平方根*nの平方根=nなので)。
	// したがって、a、bのどちらかはnの平方根以下である。
	// どちらかがnの平方根以下ということは、nの平方根までで割り切れる数が存在するか調べればよい。
	//
	// 例えば、n=99の場合
	// nの平方根は9.9498743710662
	// 平方根の整数部分は9
	// 9までで割り切れるかを判定すれば良い
	// なぜなら、10*10=100なので両方が10以上はあり得ない
	// つまり片方が9以下の場合のみ考えれば良い
	// 9までで割り切れるかを調べれば良い
	for i := 2; i*i <= n; i++ {
		if n%i == 0 {
			return false
		}
	}
	return true
}

func main() {
	fmt.Println(math.Sqrt(99))
}
